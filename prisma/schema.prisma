// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


// my shit


model User {
  id       String    @id @default(cuid())
  name     String?
  email    String?   @unique
  emailVerified DateTime?
  image    String?
  accounts Account[]
  sessions Session[]
  flags    String?

  username String?  @unique

  Links Link[]
  Profiles Profile[]
  SpyPixels SpyPixel[]


  bookmarkFolder   BookmarkFolder? 


  admin Boolean @default(false)
  spyPixel Boolean @default(false)

  // role     String?   @default("user")
  requireSetup Boolean @default(true)
}

model Link {
  id        String   @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  name      String
  slug      String   @unique
  url       String

  clicks    Click[]

  @@index([userId])
  @@index([slug])
}

model Profile {
  id     String @id @default(cuid())   

  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String 

  name        String
  altName     String?
  slug        String @unique
  bio         String?

  profileLinks ProfileLink[]

  linkOrder String

  clicks Click[]

  @@index([userId])
  @@index([slug])
}

model ProfileLink {
  
  id          String   @id @default(cuid())   

  profile        Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId      String

  visible       Boolean @default(true)

  // order       Int
  title       String
  url         String
  description   String?     
  iconUrl     String?
  bgColor       String?
  fgColor       String?
}

model SpyPixel {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user       User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String 

  name      String
  
  slug      String   @unique

  clicks    Click[]
}

model Click {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  linkId    String?
  link      Link?     @relation(fields: [linkId], references: [id], onDelete: Cascade)

  profileId String?
  profile   Profile?  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  spyPixelId String?
  spyPixel   SpyPixel? @relation(fields: [spyPixelId], references: [id], onDelete: Cascade)

  userAgent String?
  ipAddress String?
  referer   String?
  allHeaders   String?
}

model BookmarkFolder {
  id               String            @id @default(cuid()) 
  createdAt        DateTime          @default(now())
  
  user             User?             @relation(fields: [userId], references: [id])
  userId           String?           @unique         // Root folder for user, nullable for subfolders
  
  type             String            @default("folder")
  name             String
  
  // Self-referencing relation for nested folders
  parentFolder     BookmarkFolder?   @relation("Subfolders", fields: [parentFolderId], references: [id])
  parentFolderId   String?
  subfolders       BookmarkFolder[]  @relation("Subfolders")

  bookmarks        Bookmark[]
}

model Bookmark {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())

  folder           BookmarkFolder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId         String

  tags             BookmarkTag[]

  name             String
  url              String
}

model BookmarkTag {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now())

  bookmark         Bookmark?      @relation(fields: [bookmarkId], references: [id], onDelete: Cascade)
  bookmarkId       String?

  name             String
}

// model invitedUsers {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
  
//   email     String 
// }
